#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

usage() {
  echo "Usage: $0 [-k | --key <string>] [-u | --url <string>]";
  echo -e "  -h | --help \t this dialog"
  echo -e "  -k | --key \t path to the key file";
  echo -e "  -u | --url \t url with a token (generated by connector-service)"
  exit 1;
}

while [ $# -gt 0 ];
do
case $1 in
  -h|--help)
          shift
          usage
          ;;
  -u|--url)
          shift
          u=$1
          shift
          ;;
  -k|--key)
          shift
          k=$1
          shift
          ;;
  *)
          usage
          ;;
esac
done;

if [[ -z "${u}" ]]; then
  usage
fi

echo "One-Click-Integration script started with following parameters:"
echo -e "Key file: \t\t ${k}"
echo -e "Connector-Service URL: \t ${u}"
echo ""

# Dependencies
echo "Checking dependencies:"

## Curl
$(which curl &> /dev/null;)
if [[ $? != 0 ]]
  then
    echo -e "${RED}curl${NC}"
    exit 1;
  else echo -e "${GREEN}curl${NC}"
fi

## OpenSSL
$(which openssl &> /dev/null;)
if [[ $? != 0 ]]
  then
    echo -e "${RED}openssl${NC}"
    exit 1;
  else echo -e "${GREEN}openssl${NC}"
fi

## JQ
$(which jq &> /dev/null;)
if [[ $? != 0 ]]
  then
    echo -e "${RED}jq${NC}"
    exit 1;
  else echo -e "${GREEN}jq${NC}"
fi

## Base64
$(which base64 &> /dev/null;)
if [[ $? != 0 ]]
  then
    echo -e "${RED}base64${NC}"
    exit 1;
  else echo -e "${GREEN}base64${NC}"
fi

echo ""
echo -e "${GREEN}Dependencies fulfilled${NC}"
echo ""

## GET /info
echo "Fetching info for CSR"
infoRequest=$(curl -k -L ${u})
if [[ $? != 0 ]]
  then
    echo -e "${RED}Request Failed${NC}"
    exit 1;
fi

csrUrl=$( echo ${infoRequest} | jq '.csrUrl' | tr -d '"' )
subject=$( echo ${infoRequest} | jq '.certificate.subject')

### Check if csr url and subject values were returned
if [[ "$csrUrl" == null ]] || [[ "$subject" == null ]]; then
  echo -e "${RED}Info request failed${NC}"
  echo -e "${RED}Status code: \t $( echo ${infoRequest} | jq '.code' )${NC}"
  echo -e "${RED}Error: \t\t $( echo ${infoRequest} | jq '.error' )${NC}"
  exit 1;
fi

### Fix subject (if old version of connector-service is used)
subject=$( echo ${subject} | tr , / | tr -d '"' )

### Check if subject string starts with '/' and fix if it does not
if [[ $subject != /* ]]; then subject="/$subject"; fi
echo ""
echo -e "${GREEN}Info request succeeded${NC}"
echo -e "${GREEN}csrUrl: \t $( echo ${csrUrl} )${NC}"
echo -e "${GREEN}subject: \t $( echo ${subject} )${NC}"

## If key was not provided create it
if [[ -z "${k}" ]]; then
  echo ""
  echo "Creating key file"
  echo ""
  key=$(openssl genrsa -out generated.key 4096)
  if [[ $? != 0 ]]
    then
      echo -e "${RED}Failed to create a key file${NC}"
      exit 1;
  fi

  echo ""
  echo "Creating CSR"
  csr=$(openssl req -new -out generated.csr -key generated.key -subj ${subject})
else
  echo ""
  echo "Creating CSR"
  csr=$(openssl req -new -out generated.csr -key ${k} -subj ${subject})
fi

if [[ $? != 0 ]]
  then
    echo -e "${RED}Failed to create CSR${NC}"
    exit 1;
fi

## Base64 encode the CSR
csrb64=$( cat generated.csr | base64 )
if [[ $? != 0 ]]
  then
    echo -e "${RED}CSR not found${NC}"
    exit 1;
fi

## Send POST request to client-certs
echo "Sending CSR"
signRequest=$(curl -k -L -X POST -H "Content-Type: application/json" -d '{"csr":"'${csrb64}'"}' ${csrUrl})
if [[ $? != 0 ]]
  then
    echo -e "${RED}Request Failed${NC}"
    exit 1;
fi

crtb64=$( echo ${signRequest} | jq '.crt' | tr -d '"' )
if [[ "$crtb64" == null ]]; then
  echo -e "${RED}Sign request failed${NC}"
  echo -e "${RED}Status code: \t $( echo ${signRequest} | jq '.code' )${NC}"
  echo -e "${RED}Error: \t\t $( echo ${signRequest} | jq '.error' )${NC}"
  exit 1;
fi

echo ""
echo -e "${GREEN}Sign request succeeded${NC}"
echo ""

## Decode response and save as a certificate file
echo "Decoding and saving certificate"
echo ""
crt=$( echo ${crtb64} | base64 --decode >> generated.crt )
if [[ $? != 0 ]]
  then
    echo -e "${RED}Decoding failed${NC}"
    exit 1;
fi

echo -e "${GREEN}Certificate retrieved successfully${NC}"

echo "Cleaning up..."
$(rm generated.csr)
echo "Done!"